# //1 TypeDefs
# //type name{} is root of that name query
# //add new operation in schema definition
# One convenient thing about the constructor of the GraphQLServer is that typeDefs can be provided either directly as a string (as you previously did) or by referencing a file that contains your schema definition (this is what youâ€™re doing now).

# Type Defs

# Query: Read type
# removed from query link(id: String!): Link
# first skip last are for pagination
type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int): [Link!]!
}
# Mutation:Create,Upadte,Delete type
type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password: String!, name: String!): AuthPayLoad
  login(email: String!, password: String!): AuthPayLoad
  vote(linkId: ID!): Vote
}
# Type Name:Custom type
type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

# token attached with user
# token which can be used to authenticate subsequent requests against your GraphQL API. This information is bundled in the AuthPayload type.
type AuthPayLoad {
  token: String
  user: User
}

# custom user type
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  links: [Link!]!
}

# type subscription
type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}
